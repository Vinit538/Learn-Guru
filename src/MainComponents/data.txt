{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}














import React, { useState } from 'react';
import { useAuth } from '../MainComponents/AuthContext';
import { useNavigate } from 'react-router-dom';
import { Card, CardBody, CardTitle, CardSubtitle, CardText } from 'reactstrap';
import Heart from 'react-animated-heart';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import {
  faHeart as solidHeart,
  faHeart as regularHeart,
  faUsers,
  faStar,
} from '@fortawesome/free-solid-svg-icons';
import '@fontsource/ibm-plex-sans';
import base_url from '../api/bootapi';
import axios from 'axios';
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const CourseCard = ({ course, statusData }) => {
  // for user
  const { user } = useAuth();

  const [isClick, setClick] = useState(course.likedId.includes(user.userId));
  const navigate = useNavigate();
  //const userLikedCourse = course.likedId.includes(user.userId);
  const [likes, setLikes] = useState(course.courseLikes);

  function likeButton() {
    isClick ? userDisLikesCourse() : userLikesCourse();
  }

  async function userLikesCourse() {
    try {
      await axios.post(`${base_url}/likedCourse/${user.userId}/${course.courseId}`);
      setClick(!isClick);
      setLikes(likes + 1);
    } catch (error) {
      console.log(error);
    }
  }

  async function userDisLikesCourse() {
    try {
      await axios.put(`${base_url}/likedCourse/${user.userId}/${course.courseId}`);
      setClick(!isClick);
      setLikes(likes - 1);
    } catch (error) {
      console.log(error);
    }
  }

  async function handleLearnUnEnroll(){
    try{
      const response = await axios.put(`${base_url}/enrollCourse/${user.userId}/${course.courseId}`);
      toast.success("Dis Enroll Success");
      navigate(`/enrolledCourse`);
    }
    catch(error)
    {
        toast.error("DisEnroll Not Success");
    }
  }



  function handleEnrollButtonClick() {
    navigate(`/enrollCourse/${course.courseId}`);
  }

  const handleLearnButtonClick = () => {
    navigate(`/getEnrolledCourseLesson/${course.courseId}`);
    console.log('Learn Button Click');
  };

  return (
    <div>  
    <ToastContainer
      position="top-right"
      autoClose={6000}
      hideProgressBar={false}
      newestOnTop={false}
      closeOnClick
      rtl={false}
      pauseOnFocusLoss
      draggable
      pauseOnHover
      theme="colored"
    />
    <Card style={{ maxWidth: 350 }} className="courseCard">
      <div className="courseImage">
        <img
          src={`data:image/jpeg;base64,${course.courseImage}`}
          alt="Course image"
          className="courseImage"
          style={{ height: '190px', width: '320px', objectFit: 'cover' }}
        />
        <div className="likeButton">
          <Heart
            isClick={isClick}
            onClick={likeButton}
            className="inactiveColor"
            style={{ color: isClick ? '#ed0202' : 'blue' }}
          />
        </div>
      </div>
      <div className="enrollLikes">
        <div>
          <FontAwesomeIcon icon={faUsers} /> <span> Enrolled {course.courseEnroll} </span>
        </div>
        <div>
          {isClick ? (
            <FontAwesomeIcon icon={solidHeart} style={{ color: '#f00000' }} />
          ) : (
            <FontAwesomeIcon icon={regularHeart} />
          )}
          <span> {likes}</span>
        </div>
      </div>
      <CardBody className="courseCardBody">
        <CardTitle tag="h5" className="courseTitle">
          {course.courseTitle}
        </CardTitle>
        <CardSubtitle tag="h6" className="courseSubTitle">
          {course.courseSubTitle}
        </CardSubtitle>
        <CardText className="noOfLessons">Units : {course.noOfLessons}</CardText>
        <CardText className="courseSkills">
          Skills : <span className="courseSkillText">{course.courseSkills}</span>
        </CardText>
        <div className="cardFooter">
          <div>
            <FontAwesomeIcon icon={faStar} style={{ color: '#ed0202' }} />
            <span> 4.5</span>
          </div>
        </div>
        <div>
          <div className="buttons">
            {
              course.enrolledId.includes(user.userId) ? (
               <div style={{display:'flex',flexDirection:'row', gap:'10px'}}>
                <button className="courseButton col" onClick={handleLearnButtonClick}>
                Start Learning
              </button>
              <button className="courseButton col" onClick={handleLearnUnEnroll}>
                Un Enroll
            </button>
               </div>
              ):
              (
                <button className="courseButton col" onClick={handleEnrollButtonClick}>
                Enroll
              </button>
              )
            }
          </div>
        </div>
      </CardBody>
    </Card>
    </div>
  );
};

export default CourseCard;



/* Student Home */

.studentHome{
    border-radius: 10px;
    box-shadow: 0px 2px 7px rgba(0, 0, 0, 0.2);
}

.pageHeading{
    font-family: 'Gabriela', sans-serif;
}

/* ViewCourse */
.viewCourseBody{
    border-radius: 10px;
    box-shadow: 0px 2px 7px rgba(0, 0, 0, 0.2);
    padding: 40px !important;
    justify-content: center;
    width: auto;        
}
.allCourseCards {
display: grid;
grid-template-columns: 1fr 1fr 1fr; /* Update this line */
grid-template-rows: auto 1fr auto;
gap: 15px;
}

@media (max-width: 900px) {
.allCourseCards {
grid-template-columns: 1fr 1fr; /* Change the number of columns for smaller screens */
}
}

@media (max-width: 700px) {
.allCourseCards {
grid-template-columns: 1fr; /* Further change the number of columns for even smaller screens */
}
}

/* TrainerCourseCard */


.courseCard{
      font-family: 'IBM Plex Sans', sans-serif;
      height: 300px;
      border-radius: 10px !important;
      padding: 15px;
      box-shadow: 0px 2px 7px rgba(0, 0, 0, 0.2); 
      background-color: #FFDEE9;
      background-image: linear-gradient(0deg, #FFDEE9 0%, #B5FFFC 100%);
      border-color: #26a0da !important;
      margin-bottom: 10px;
      justify-content: center;        
  }
  
  .courseImage {
      position: relative;
      border-radius: 15px;
      overflow: hidden;
      border-color: #26a0da;
    }
    
    .courseImage img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: opacity 0.3s ease; /* Smooth transition for opacity */
    }
    
    .courseImage:hover img {
      filter: blur(1px); /* Set the desired transparency for the image on hover */
      border: 0.5px solid black; 
    }
    
    .courseImage:hover .likeButton {
      display:block !important;
      background-color: transparent;
      backdrop-filter: blur(1px);
     
    }

    .courseTitle{
      font-size: 30px;
      font-weight: bold;
    }
    .courseSubTitle{
      margin-top: 20px !important;
      font-size: 25px;
    }
    .noOfLessons{
      margin-top: 10px;
      font-size: 15px;
      font-weight: bolder;
    }
    .courseSkills{
      font-size: 15px;
      font-weight: bolder;
    }
    .courseSkillText{
      font-weight: none;
    }
    
    .likeButton {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      display: none;
     
    }
    .enrollLikes{
      display: block;
      flex-direction: row;
      justify-content: space-between;
      padding: 10px;
    }
    
  .courseCardBody{
    gap:10px;
    margin-left: -20px;
    padding: 10px;
  }
  .cardFooter{
    display: block;
    flex-direction: column;
    
    padding-right: 10px;
    margin-top: -10px !important;
    margin-bottom: 5px;
    margin-top: 80px;
  }
  
  .buttons{
    margin-top: 20px;
    display: grid;
    grid-template-columns: 1fr 1fr; /* Update this line */
    grid-template-rows: auto 1fr auto;
    gap:5px;
  }
       
  @media (max-width: 1000px) {
    .buttons {
      grid-template-columns: 1fr; 
      grid-template-rows: auto 1fr auto;
    }
  }
  
  @media (max-width: 700px) {
    .buttons {
      grid-template-columns: 1fr; /* Further change the number of columns for even smaller screens */
    }
  }
  .courseButton {
    width: 130px !important;
    background-image: linear-gradient(to right, #2c3e50 0%, #3498db  51%, #2c3e50  100%);
    text-align: center;
    text-transform: uppercase;
    transition: 0.5s;
    background-size: 200% auto;
    color: white;            
    box-shadow: 0 0 20px #eee;
    border-radius: 10px;
    display: block;
    padding: 5px;
    padding-top: 10px !important;
    padding-bottom: 10px !important;
    margin-left: auto;
    margin-right: auto;
  }
  
  .courseButton:hover {
    background-position: right center; /* change the direction of the change here */
    color: #fff;
    text-decoration: none;
  }



  /* Enroll course page */
  .addCoursePage{
    border-radius: 10px;
    box-shadow: 0px 2px 7px rgba(0, 0, 0, 0.2);
    padding: 20px !important;
}
.pageHeading,.modelHeading{
    font-family: 'Gabriela', sans-serif;
}
Form{
    padding: 10px;
}
Input{
    width:'200px' !important;
}
Label{
  font-family: 'Barlow', sans-serif;
  font-size: 25px !important;      
}

.addCourseForm{
    width: 750px !important;
}
.btnSubmit {
    background-image: linear-gradient(to right, #314755 0%, #26a0da  51%, #314755  100%);
    margin-left: auto;
    margin-right: auto;
    padding: 15px 45px;
    text-align: center;
    text-transform: uppercase;
    transition: 0.5s;
    background-size: 200% auto;
    color: white;            
    box-shadow: 0 0 20px #eee;
    border-radius: 10px;
    display: block;
  }

  .btnSubmit:hover {
    background-position: right center; /* change the direction of the change here */
    color: #fff;
    text-decoration: none;
  }


  /* Student Lesson  */

  /* student Lesson page */

  .LessonPage{
    border-radius: 15px !important;
    padding: 10px;
    margin-top: 20px;
    background: #2BC0E4;  /* fallback for old browsers */
    background: -webkit-linear-gradient(to right, #EAECC6, #2BC0E4);  /* Chrome 10-25, Safari 5.1-6 */
    background: linear-gradient(to right, #EAECC6, #2BC0E4); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */

  }
  .StudentLessonSection{
    border: 2px solid;
    border-image: linear-gradient(to right, #2c3e50 0%, #3498db 51%, #2c3e50 100%);
    border-image-slice: 1;
    border-radius: 15px;
    padding: 10px;

  }

  .videoBox{
    /* border: 2px solid;
    border-image: linear-gradient(to right, #2c3e50 0%, #3498db 51%, #2c3e50 100%);
    border-image-slice: 1; */
    padding:20px;
  }
  .videoSection{
    position: relative;
    object-fit: fill;
    margin-left: auto;
    margin-right: auto;
    
  }

  .videoPlayer{
    margin-left: auto;
    margin-right: auto;
    object-fit: fill; 
    transition: opacity 0.3s ease;
    box-shadow: 0 0 20px #eee;
  }
  .videoSection :hover .videoPlayer{
    filter: blur(0.5px);
  }
  .videoSection:hover .videoControls{
    display:block !important;
    background-color: transparent;
  }
  .videoControls{
    position: absolute;
    top: 50%;
    left: 50%;
    background-color: #2c3e50;
    transform: translate(-50%, -50%);
    display: none; 
  }

  @media (max-width: 1100px) {

    .videoPlayer{
      width: 500px !important;
      height: 300px !important;
    } 
  
  }


  @media (max-width: 900px) { 
    .videoPlayer{
      width: 450px !important;
      height: 280px !important;
      padding: 5px;
    } 
  
  }
  @media (max-width: 700px) { 
    .videoPlayer{
      width: 400px !important;
      height: 200px !important;
      padding: 5px;
    } 
  }
  @media (max-width: 500px) { 
    .videoPlayer{
      width: 300px !important;
      height: 200px !important;
    } 
  }
  
           
  .directionButton {
    background-image: linear-gradient(to right, #517fa4 0%, #243949  51%, #517fa4  100%);
    margin: 10px;
    padding: 15px 45px;
    text-align: center;
    text-transform: uppercase;
    transition: 0.5s;
    background-size: 200% auto;
    color: white;            
    /* box-shadow: 0 0 20px #eee; */
    border-radius: 10px;
    display: block;
  }
  
  .directionButton:hover {
    background-position: right center; /* change the direction of the change here */
    color: #fff;
    text-decoration: none;
  }
  

  /* lodders */

  .loader{
    top:50%;
    left: 50%;
}


  {/* <UncontrolledDropdown
                  inNavbar
                  direction="down"
                  className="me-2"
                >
                  <DropdownToggle nav>
                    {user.userRole === "Trainer" && (
                          <FontAwesomeIcon
                          icon={faUserTie}
                          size="2xl"
                          //  style={{ color: "#213454" }}
                          className="userIcon"
                          />
                    )}
                   
                    {user.userRole === "Student" &&(
                      <FontAwesomeIcon 
                      icon={faUserGraduate} 
                      size="2xl" 
                      // style={{ color: "#213454" }}
                      className="userIcon"
                    
                      />
                    )}
                    
                    <span className="userName">{user.userName}</span>
                  </DropdownToggle>
                  <DropdownMenu className="dropMenu">
                    <DropdownItem>
                      <p>{user.userId}</p>
                    </DropdownItem>
                    <DropdownItem onClick={profileClick}>Profile</DropdownItem>
                    <DropdownItem>Account</DropdownItem>
                    <DropdownItem>Dashboard</DropdownItem>
                    <DropdownItem onClick={logout}>
                      <Link to="/">Logout</Link>
                    </DropdownItem>
                  </DropdownMenu>
                </UncontrolledDropdown> */}